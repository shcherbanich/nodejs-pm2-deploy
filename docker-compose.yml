services:
  database:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      PGDATA: ${POSTGRES_PGDATA:-/var/lib/postgresql/data}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [app-net]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: mesto-backend:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_HOST: database
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "4000:4000"
    networks: [app-net]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    image: mesto-frontend:latest
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "8081:80"
    networks: [app-net]

volumes:
  pg_data:

networks:
  app-net:
    driver: bridge
